#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int* aloc(){
    int *vet;
    if((vet=(int*) calloc(1000,sizeof(int)))==NULL) exit(1);
    return vet;
}
void bubble_sort(int* vet) {
    int i = 0, j = 0,l = 0,k=0, tmp;
    printf("\n\n\n\tBUBBLE SORT\n\n");
    for (i = 0; i < 1000; i++) {
        for (j = 0; j < 1000 - i - 1; j++) {
            if (vet[j] > vet[j + 1]) {
                tmp = vet[j];
                vet[j] = vet[j + 1];
                vet[j + 1] = tmp;
            }
        }
    }
    for(l=0;l<1000;l++){
        printf("\n");
    for(k=0;k<10;k++){
        printf("    %d",vet[l]);
        l++;
        }
    }
}
void preenche(int* vet,int* vet2){
    srand((unsigned)time(NULL));
    int i=0;
    for(i=0;i<1000;i++){

        vet[i]=rand()%100000;
        vet2[i]=vet[i];
    }
    }


void achamediana(int *vet){
    int i=0;
    float mediana;
    mediana=(vet[499]+vet[500])/2;
    printf("MEDIANA=%.2f",mediana);
}
void acha_menor_maior(int* vet)
{
int i=0;
int*menor,*maior;

 menor = vet+i;
 maior = vet+i;

 for(i=0;i<1000;i++)
 {
     if(*menor>*(vet+i)&& *(vet+i)!= 0)
         menor = (vet+i);
     if(*maior<*(vet+i))
        maior = (vet+i);
 }
    printf("\n\nO maior numero do vetor eh: %d",*maior);
    printf("\nO menor numero do vetor eh: %d\n\n",*menor);
}

void tirarmedia(int* vet){
    int i=0,soma=0;
    float media;
    for(i=0;i<1000;i++){
        soma+=vet[i];
    }
    media=soma/1000;
    printf("\n\nMedia dos valores do vetor: %.2f\n\n ",media);
}
void quicksort(int*vet,int first,int last)
{
    int i, j, pivot, temp,l=0,k=0;
    if(first<last)
    {
        pivot=first;
        i=first;

        j=last;

        while(i<j)
        {
            while(vet[i]<=vet[pivot]&&i<last)
                i++;

            while(vet[j]>vet[pivot])
                j--;

            if(i<j)
            {

                temp=vet[i];
                vet[i]=vet[j];
                vet[j]=temp;

            }

        }

        temp=vet[pivot];
        vet[pivot]=vet[j];
        vet[j]=temp;
        quicksort(vet,first,j-1);
        quicksort(vet,j+1,last);

    }
}
void imprimevet2(int* vet){

    int k=0,l=0;
    printf("\n\n\n\tQUICK SORT\n\n");
        for(l=0;l<1000;l++){
        printf("\n");
    for(k=0;k<10;k++){
        printf("    %d",vet[l]);
        l++;
        }
    }

}
int main()
{
    int *vet, *vet2;
    vet=aloc();
    vet2=aloc();
    preenche(vet,vet2);
    acha_menor_maior(vet);
    tirarmedia(vet);
    achamediana(vet);
    bubble_sort(vet);
    quicksort(vet2,0,998+1);
    imprimevet2(vet2);

    return 0;
}
